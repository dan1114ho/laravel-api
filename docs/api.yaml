swagger: '2.0'
info:
  title: Junket API
  description: Private API for the wejunket.com mobile apps. 
  version: 1.0.7
host: api.wejunket.com
basePath: /mobile
schemes:
 - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: auth
  - name: tours

paths:
  /auth/session:
    get:
      tags:
        - auth
      summary: User Session
      description: Get information about the logged in user.
      operationId: session
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
      
  /auth/refresh:
    get:
      tags:
        - auth
      summary: Refresh JWT Token
      description: Submit an expired JWT token and get a new active one.
      operationId: refresh
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        204:
          description: OK
          headers:
            Authorization:
              type: string
              description: The new JWT bearer auth token.
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /auth/signup:
    post:
      tags:
        - auth
      summary: Sign up
      description: Register for an account.
      operationId: signup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                description: The user's first and/or last name.
                example: John Doe
                maximum: 255
              email:
                type: string
                example: client@test.com
                description: The user's email address.
                maximum: 255
              password:
                type: string
                example: secret
                description: The user's password.
                minimum: 6
              password_confirmation:
                type: string
                example: secret
                description: Confirmation of the user's password.
                minimum: 6
              zipcode:
                type: string
                example: 12345
                description: The user's zipcode.
                maximum: 16
      responses:
        200:
          description: Successful registration
          schema: 
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                description: JWT Auth token to be used for Bearer authentication header.
        422:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Submit credentials and get the JWT auth token.
      operationId: login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: The user's login credentials.
          schema:
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: client@test.com
                description: The user's email address.
              password:
                type: string
                example: secret
                description: The user's password.
      responses:
        200:
          description: Successful login
          schema: 
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                description: JWT Auth token to be used for Bearer authentication header.
        422:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
          
  /auth/login/facebook:
    post:
      tags:
        - auth
      summary: Facebook Login
      description: Login and/or create an account using a Facebook Access Token.
      operationId: facebookLogin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: access_token
          description: The user's Facebook Access Token.
          schema:
            required:
              - token
            properties:
              token:
                type: string
                example: ___access_token___
                description: Facebook Access Token.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
  
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Forgot password
      description: Submit a forgot password request and dispatch an email to the user on how to reset their password.
      operationId: forgotPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          schema:
            required:
              - email
            properties:
              email:
                type: string
                example: test@test.com
                description: The user's email.
      responses:
        200:
          description: OK - Email has been sent
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /tours:
    get:
      tags:
        - tours
      summary: Tour listing
      description: Get a paginated listing of all published Tours.
      operationId: tours
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: query
          name: nearby
          required: false
          description: 'Coordinates to search for nearby tours.  Format: lat,lon (optional)'
          type: string
          example: '25.811481872869393,-80.13444900512695'
        - in: query
          name: debug
          required: false
          description: Debug mode flag. This will include the current logged in users unpublished tours in the listing.
          type: boolean
          example: 1
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                description: Array of Tours.
                type: array
                items:
                  $ref: '#/definitions/Tour'
              links:
                description: Pagination links
                $ref: '#/definitions/PaginationLinks'
              meta:
                description: Pagination meta
                $ref: '#/definitions/PaginationMeta'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
          
  /tours/{tour_id}:
    get:
      tags:
        - tours
      summary: Get Tour details
      description: Returns all of the information for the given tour, including the route points and the stops.
      operationId: tour
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: tour_id
          description: ID of the desired Tour
          required: true
          type: integer
          format: int64
        - in: query
          name: debug
          required: false
          description: Debug mode flag. This will allow viewing the current logged in users unpublished tours.
          type: boolean
          example: 1
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              tour:
                description: The information for the Tour.
                $ref: '#/definitions/Tour'
              stops:
                description: All of the Stops on the Tour.
                type: array
                items:
                  $ref: '#/definitions/Stop'
              route:
                description: An array of points that make up the Tour's route.
                type: array
                items:
                  $ref: '#/definitions/TourRoutePoint'
              latest_reviews:
                description: The last 5 reviews for that tour that contain a review comment.
                type: array
                items:
                  $ref: '#/definitions/Review'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/UnexpectedError'

  /profile/{user_id}:
    get:
      tags:
        - profile
      summary: Profile (view)
      description: Get a user's profile information.
      operationId: getProfile
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: ID of the User
          required: true
          type: integer
          format: int64
        - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/UnexpectedError'
          
  /profile:
    post:
      tags:
        - profile
      summary: Profile (update)
      description: Update the current user's profile.
      operationId: updateProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            required:
              - name
            properties:
              name:
                type: string
                description: The user's first and/or last name.
                example: John Doe
                maximum: 255
              zipcode:
                type: string
                example: 12345
                description: The user's zipcode.
                maximum: 16
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /profile/avatar:
    post:
      tags:
        - profile
      summary: Set Avatar
      description: Upload and set the user's avatar image.  Images are automatically resized into 750x750 squares.  It is expected that cropping is handled on the client side before submitting the image.
      operationId: updateAvatar
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: image
          in: formData
          type: file
          required: true
          description: The image to upload.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /profile/password:
    patch:
      tags:
        - profile
      summary: Change Password
      description: Update the current user's password.
      operationId: changePassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: data
          description: New password.
          schema:
            required:
              - password
              - password_confirmation
            properties:
              password:
                type: string
                example: secret
                description: The user's password.
                minimum: 6
              password_confirmation:
                type: string
                example: secret
                description: Confirmation of the user's password.
                minimum: 6
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /profile/change-email:
    post:
      tags:
        - profile
      summary: Change Email (request)
      description: Submit request to update the current user's email.  Upon successfull request, the user will be sent an email with an activation code.
      operationId: changeEmail
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: data
          description: New email.
          schema:
            required:
              - email
              - email_confirmation
            properties:
              email:
                type: string
                example: test@test.com
                description: The user's new email.
                maximum: 255
              email_confirmation:
                type: string
                example: test@test.com
                description: The user's new email (repeated).
                maximum: 255
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /profile/change-email/confirm:
    post:
      tags:
        - profile
      summary: Change Email (confirm)
      description: "Submit a an activation code to reset the user's email.  Activation codes are case-insensitive and expire after 30 minutes."
      operationId: changeEmailConfirm
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: data
          description: Actication code.
          schema:
            required:
              - code
            properties:
              code:
                type: string
                example: ABC123
                description: Activation code (with or without dash, case-insensitive)
                maximum: 7
                minimum: 6
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        403:
          description: User does not own the activation code.
        404:
          description: Invalid activation code.
        419:
          description: Activation code has expired or has already been used.
        500:
          $ref: '#/responses/UnexpectedError'

  /scores/start:
    post:
      tags:
        - scores
      summary: Start Tour
      description: Create new entry for scoring a Tour.  This is used whenever a user beings a Tour in the App.  Returns a fresh ScoreCard object.
      operationId: scoresStart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: body
          name: request
          description: Request object.
          schema:
            required:
              - tour_id
            properties:
              tour_id:
                type: integer
                format: int32
                description: The ID of the Tour that user has started.
                example: 10005
              timestamp:
                type: integer
                format: int32
                description: UTC UNIX timestamp of when the action occurred.
                example: 1538411257
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/definitions/ScoreCard'
        422:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /scores/{score_card_id}/progress:
    post:
      tags:
        - scores
      summary: Progress Tour
      description: Save a Tours progress and get the updated score.  This is used to save a new stop visit.  Returns a the ScoreCard object with updated points and progress.  If the stop was the last stop on the Tour, the score card is "finished" and the finished_at timestamp will reflect this.
      operationId: scoresProgress
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: score_card_id
          description: ID of the ScoreCard returned when the user started the Tour.
          required: true
          type: integer
          format: int64
        - in: body
          name: request
          description: Request object.
          schema:
            required:
              - stop_id
            properties:
              stop_id:
                type: integer
                format: int32
                description: The ID of the stop that user has visited.
                example: 1999
              timestamp:
                type: integer
                format: int32
                description: UTC UNIX timestamp of when the action occurred.
                example: 1538411257
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/definitions/ScoreCard'
        401:
          $ref: '#/responses/Unauthroized'
        403:
          description: 'User has already completed the Tour using this ScoreCard.'
          schema: 
            $ref: '#/responses/GeneralError'
        422:
          $ref: '#/responses/ValidationError'
        500:
          $ref: '#/responses/UnexpectedError'

  /scores:
    get:
      tags:
        - scores
      summary: User Scores
      description: Get a list of the user's scores for all Tours they have taken.  This includes all regular tours that have been started, but only the finished adventure tours.  The scores are sorted by the total number of points and only the top score is returned for each tour.
      operationId: scoresGet
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
      responses:
        200:
          description: OK
          schema: 
            type: array
            items:
              $ref: '#/definitions/ScoreCard'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /scores/find/{tour_id}:
    get:
      tags:
        - scores
      summary: Find ScoreCard
      description: Get all of the users scores for a specific tour.  This can be used to look up if the user currently has a tour in progress, to look up their best score for a tour, or to look up the history of how many times they took the Tour.
      operationId: scoresFind
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: tour_id
          description: ID of the Tour to find score for.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema: 
            type: object
            properties:
              best:
                $ref: '#/definitions/ScoreCard'
              in_progress:
                type: array
                items:
                  $ref: '#/definitions/ScoreCard'
              finished:
                type: array
                items:
                  $ref: '#/definitions/ScoreCard'
        401:
          $ref: '#/responses/Unauthroized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/UnexpectedError'

  /leaderboard/{tour_id}:
    get:
      tags:
        - scores
      summary: Leaderboard
      description: Get the top 100 leaderboard for a given Tour.
      operationId: scoresLeaderboard
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: tour_id
          description: ID of the Tour.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema: 
            type: object
            properties:
              leaders:
                type: array
                items:
                  $ref: '#/definitions/LeaderboardEntry'
        401:
          $ref: '#/responses/Unauthroized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/UnexpectedError'

  /reviews/{tour_id}:
    get:
      tags:
        - reviews
      summary: Review (list)
      description: A paginated list of the given Tour's reviews, sorted by most recent.
      operationId: listReview
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: tour_id
          description: ID of the desired Tour
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                description: Array of Reviews.
                type: array
                items:
                  $ref: '#/definitions/Review'
              links:
                description: Pagination links
                $ref: '#/definitions/PaginationLinks'
              meta:
                description: Pagination meta
                $ref: '#/definitions/PaginationMeta'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
    post:
      tags:
        - reviews
      summary: Review (create/update)
      description: Submit a rating or review for the given Tour.  If the user has previous submitted a rating or review, it will updated to the new values.
      operationId: createReview
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: tour_id
          description: ID of the desired Tour
          required: true
          type: integer
          format: int64
        - in: body
          name: rating
          required: true
          description: The rating value of the review.  This is based on a 5 star rating system, but uses whole numbers instead of decimals.  For example 25 = 2.5 stars.
          schema:
            required:
              - rating
            properties:
              rating:
                type: integer
                format: int32
                description: The rating value of the review.  This is based on a 5 star rating system, but uses whole numbers instead of decimals.  For example 25 = 2.5 stars.
                example: 25
                minimum: 0
                maximum: 50
              review:
                type: string
                example: Great tour!  We had a nice time.
                description: A short text review of the Tour 
                maximum: 255
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
    delete:
      tags:
        - reviews
      summary: Review (delete)
      description: Delete the current user's review for the given Tour.
      operationId: deleteReview
      produces:
        - application/json
      parameters:
        - in: path
          name: tour_id
          description: ID of the desired Tour
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /device:
    post:
      tags:
        - analytics
      summary: Store device
      description: Store user device information and get device tracking ID.
      operationId: trackDevice
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: body
          type: object
          required: true
          description: The user's device data.
          schema:
            required:
              - device_udid
              - os
              - type
            properties:
              device_udid:
                type: string
                description: The user device's unique identifier.
                example: 2b6f0cc904d137be2e1730235f5664094b831186
              os:
                type: string
                enum: [ios, android, windows, linux, mac, other]
                description: The operating system of the device.
                example: ios
              type:
                type: string
                description: The type of device.
                enum: [phone, tablet, web, mobile_web, unknown]
                example: phone
      responses:
        200:
          description: OK
          type: object
          schema:
            properties:
              device_uuid:
                type: string
                description: The device's unique ID in the backend.
                example: a7388bf0-c596-11e8-aa6c-b56b5a718890
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
  
  /tours/{tour_id}/track:
    post:
      tags:
        - analytics
      summary: Track Tour Activity
      description: Track users activity for a given tour.  This is used solely for analytics purposes. You can track the length of time the user has been at a tour by logging START and STOP activity.  Downloads and any sharing activity should also be logged.
      operationId: trackTour
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: tour_id
          description: ID of the desired Tour
          required: true
          type: integer
          format: int64
        - in: body
          name: activity
          required: true
          schema:
            type: array
            items:
                $ref: '#/definitions/TourActivity'
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
  
  /stops/{stop_id}/track:
    post:
      tags:
        - analytics
      summary: Track Stop Activity
      description: Track users activity for a given stop.  This is used solely for analytics purposes. You can track the length of time the user has been at a stop by logging START and STOP activity.  DOWNLOAD action does not apply to stops, but sharing actions should be tracked.
      operationId: trackStop
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/AuthToken'
        - in: path
          name: stop_id
          description: ID of the desired Stop
          required: true
          type: integer
          format: int64
        - in: body
          name: activity
          required: true
          schema:
            type: array
            items:
                $ref: '#/definitions/StopActivity'
      responses:
        200:
          description: OK
        422:
          $ref: '#/responses/ValidationError'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
  
parameters:
  AuthToken:
    in: header
    name: Authorization
    type: string
    required: true
    description: |
      JTW auth bearer token in the format of "Authorization: Bearer {token_here}"

responses:
  ValidationError:
    description: Validation errors in the request body.
    schema:
      type: object
      properties:
          message:
            type: string
            description: The error message.
            example: The given data was invalid.
          errors:
            type: object
            description: A list of fields and their corresponding errors.

  NotFound:
    description: Object not found.
    schema:
      type: object
      properties:
        message:
          type: string
          description: The error message.
          example: Object not found
          
  NoToken:
    description: Invalid auth token provided.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.
          example: token_not_provided
          
  Unauthroized:
    description: Unauthorized.  Invalid or expired auth token or credentials provided.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.
          example: token_invalid
    
  UnexpectedError:
    description: An unexpected error occurred.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.

  GeneralError:
    type: object
    properties:
      message: 
        type: string
        description: The error message.

definitions:
  StopActivity: 
    type: object
    required:
      - action
      - device_id
      - timestamp
    properties:
      action:
        type: string
        enum: [start, stop, share, like, visit]
        description: The action to record.
        example: start
      device_id:
        type: string
        description: Device identifier assigned from the backend.
        example: a7388bf0-c596-11e8-aa6c-b56b5a718890
      timestamp:
        type: integer
        format: int32
        description: UTC UNIX timestamp of when the action occurred.
        example: 1538411257
        
  TourActivity: 
    type: object
    required:
      - action
      - device_id
      - timestamp
    properties:
      action:
        type: string
        enum: [download, start, stop, share, like, visit]
        description: The action to record.
        example: start
      device_id:
        type: string
        description: Device identifier assigned from the backend.
        example: a7388bf0-c596-11e8-aa6c-b56b5a718890
      timestamp:
        type: integer
        format: int32
        description: UTC UNIX timestamp of when the action occurred.
        example: 1538411257
        
  Profile:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        description: The user's first and last name.
        example: John Doe
      first_name:
        type: string
        description: The user's first name.
        example: John
      last_name:
        type: string
        description: The user's last name.
        example: Doe
      avatar_url:
        type: string
        description: The URL for the user's avatar image.
        example: 'https://media.wejunket.com/avatars/387ec13e14f96854ed64aca99a477c70.jpg'
      email:
        type: string
        description: The user's email address. (Only shown for profile of the authenticated user)
        example: user@test.com
      zipcode:
        type: string
        description: The user's zipcode. (Only shown for profile of the authenticated user)
        example: 12345
        max: 16
      fb_id:
        type: string
        description: The user's Facebook ID (Only shown for profile of the authenticated user)
        example: 100000000059
      subscribe_override:
        type: boolean
        description: A flag set only by the admin to enable site-wide subscription for the user.
        example: false
      created_at:
        type: string
        format: date-time
        description: Timestamp of when the User registered.
        example: '2018-07-21 13:53:20'
      stats:
        $ref: '#/definitions/UserStats'
        description: The users stats totals.

  UserStats:
    type: object
    properties:
      points:
        type: integer
        format: int32
        description: The total points accumulated on all tours.
        example: 6024
      tours_completed:
        type: integer
        format: int32
        description: The total number of Tours completed.
        example: 15
      stops_visited:
        type: integer
        format: int32
        description: The total number of stops visited.
        example: 88
      trophies:
        type: integer
        format: int32
        description: The total number of trophies the user has won.
        example: 8

  User:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        description: The user's first and last name.
        example: John Doe
      first_name:
        type: string
        description: The user's first name.
        example: John
      last_name:
        type: string
        description: The user's last name.
        example: Doe
      email:
        type: string
        description: The user's email address.
        example: client@test.com
      zipcode:
        type: string
        description: The user's zipcode.
        example: 12345
        max: 16
      fb_id:
        type: string
        description: The user's Facebook ID (if authorized)
        example: 100000000059
      role:
        type: string
        enum: [user, client, admin]
        description: |
          The user's role in the system.
          user - Regular mobile user
          client - Tour creator, has access to the CMS but can also be a mobile user.
          admin - System admin, has access to the Admin Panel but can also be a mobile user. 
        example: user
      subscribe_override:
        type: boolean
        description: A flag set only by the admin to enable site-wide subscription for the user.
        example: false
      avatar_url:
        type: string
        description: The URL for the user's avatar image.
        example: 'https://media.wejunket.com/avatars/387ec13e14f96854ed64aca99a477c70.jpg'
      created_at:
        type: string
        format: date-time
        description: Timestamp of when the User registered.
        example: '2018-07-21 13:53:20'
        
  Tour:
    type: object
    required:
      - id
      - user_id
      - title
      - pricing_type
      - type
      - rating
    properties:
      id:
        type: integer
        format: int32
      user_id:
        type: integer
        format: int32
      title:
        type: string
        description: The name of the tour
        example: San Fransico Ghost Tour
        maximum: 100
      description:
        type: string
        description: The full text description of the Tour.
        example: Explore the haunted history of Williamsburg with this guided audio tour app from www.colonialghosts.com ! Listen to the tour on your mobile device with a friend, or all alone...if you dare!
        maximum: 65535
      pricing_type:
        type: string
        format: enum
          - free
          - premium
        description: Pricing model for the Tour, either free or premium (paid).
        example: premium
        maximum: 10
      type:
        type: string
        format: enum
          - indoor
          - outdoor
          - adventure
        description: The type of Tour.
        example: adventure
      stops_count:
        type: integer
        format: int32
        description: The number of Stops on the Tour.
        example: 31
      location:
        $ref: '#/definitions/Location'
        description: The location of the Tour, including GPS coordinates.
      distance:
        type: integer
        format: float
        description: The distance from the supplied coordinates in miles.  Only appears when getting a Tour listing with a set nearby cooridnates parameter.
        example: 3.23
      facebook_url: 
        type: string
        description: Facebook URL
        example: https://www.facebook.com/example-page
      twitter_url: 
        type: string
        description: Twitter URL
        example: https://www.twitter.com/example-page
      instagram_url: 
        type: string
        description: Instagram URL
        example: https://www.instagram.com/example-page
      video_url:
        type: string
        description: Youtube video URL for the tour.
        example: https://youtu.be/Bey4XXJAqS8
      has_prize:
        type: boolean
        description: Whether the Tour offers a prize or not.
        example: true
      prize_details:
        type: string
        description: The details and description of the Tour prize.
        example: $10 Giftcard
        maximum: 255
      prize_instructions:
        type: string
        description: The instructions for how to redeem the Tour prize.
        example: Goto the local store to redeem.
        maximum: 65535
      prize_time_limit:
        type: integer
        format: int32
        description: The time (in hours) that the tour's prize is available after the the user wins the trophy.
        example: 48
      trophy_image:
        type: string
        description: Custom trophy image.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.png
      start_point:
        type: integer
        format: int32
        description: The ID of the first stop on the Tour.
        example: 15
      start_message:
        type: string
        description: The message to be displayed when a User starts the Tour.
        example: Welcome to Ghost Tour
        maximum: 1000
      start_video_url:
        type: string
        description: The Youtube video URL of the video that is to be displayed when a User starts the Tour.
        example: https://youtu.be/Bey4XXJAqS8
      start_image:
        type: string
        description: The image to be displayed when a User starts the Tour.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg
      end_point:
        type: integer
        format: int32
        description: The ID of the last stop on the Tour.
        example: 35
      end_message:
        type: string
        description: The message to be displayed when a User completes the Tour.
        example: Well done!
        maximum: 1000
      end_video_url:
        type: string
        description: The Youtube video URL of the video that is to be displayed when a User completes the Tour.
        example: https://youtu.be/Bey4XXJAqS8
      end_image:
        type: string
        description: The image to be displayed when a User completes the Tour.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg
      main_image:
        type: string
        description: Tour cover image.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg
      images:
        type: array
        items:
          type: string
        description: Array of additional image paths.
        example: ['http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg']
      pin_image:
        type: string
        description: Custom map pin icon.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.png
      intro_audio:
        type: string
        description: Intro audio MP3 path.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3
      background_audio:
        type: string
        description: Background audio MP3 path.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3
      length:
        type: integer
        format: float
        description: The total length of the Tour.  For adventures, this is the shortest route's length.
        example: 3.23
      rating:
        type: integer
        format: int32
        default: 0
        minimum: 0
        maximum: 50
        description: |
          The rating value of the review.  This is based on a 5 star rating system, but uses whole numbers instead of decimals.  For example 25 = 2.5 stars
        example: 25
      in_app_id:
        type: string
        maximum: 255
        description: The unique ID used for app store purchases for the Tour.
        example: com.wejunket.tour01
      created_at:
        type: string
        format: date-time
        description: Timestamp of when the Tour was created.
        example: '2018-07-21 13:53:20'
      updated_at:
        type: string
        format: date-time
        description: Timestamp of when the Tour was updated.
        example: '2018-07-21 13:53:20'
      published_at:
        type: string
        format: date-time
        description: Timestamp of when the Tour was published.
        example: '2018-07-21 13:53:20'
  
  Stop:
    type: object
    required:
      - id
      - tour_id
      - order
      - title
      - play_radius
      - is_multiple_choice
      - created_at
    properties:
      id:
        type: integer
        format: int32
        description: The ID of the Stop.
        example: 52
      tour_id:
        type: integer
        format: int32
        description: The ID of the Tour the Stop belongs to.
        example: 99
      order:
        type: integer
        format: int32
        description: The position of the stop in order.
        example: 1
      title:
        type: string
        description: The title of the Stop.
        example: Tyler Garden
        maximum: 255
      description:
        type: string
        description: The description of the Stop.
        example: Welcome to the Tyler Garden. The Tyler Garden was dedicated in 2004 and shows three busts of prominent members of the Tyler family.
      play_radius:
        type: number
        format: double
        description: The radius (in meters) that should trigger being 'near' a stop and media should start playing.
        example: 15.5
      main_image:
        type: string
        description: Stop cover image.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg
      images:
        type: array
        items:
          type: string
        description: Array of additional stop image paths.
        example: ['http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg']
      intro_audio:
        type: string
        description: Intro audio MP3 path.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3
      background_audio:
        type: string
        description: Background audio MP3 path.
        example: http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3
      is_multiple_choice:
        type: boolean
        description: Boolean to determine whether the stop question is multiple choice or simple text answer.  Only for 'adventure' Tours.
        example: true
      question:
        type: string
        description: The question to prompt the User to allow access to the next stop on the Tour.  Only for 'adventure' Tours.
        example: 'What did you see?'
        maximum: 500
      question_answer:
        type: string
        description: The correct answer to the question (non multiple choice).  Only for 'adventure' Tours.
        example: A Ghost
        maximum: 500
      question_success:
        type: string
        description: The message to prompt the User when the question is answered successfully.  Only for 'adventure' Tours.
        example: Correct!  Proceed to the next stop.
        maximum: 500
      next_stop:
        type: integer
        format: int32
        description: The ID of the next stop on the Tour to give the User when a question (non multiple choice) is successfully answered.  Only for 'adventure' Tours.
        example: 5
      choices:
        type: array
        description: The multiple choice questions.  Only for 'adventure' Tours that are marked multiple choice.
        items:
          $ref: '#/definitions/StopChoice'
      routes:
        type: array
        description: An array of points that make up the route to the next Stop from this Stop.
        items:
          $ref: '#/definitions/StopRoutePoint'
      created_at:
        type: string
        format: date-time
        description: Timestamp of when the Stop was created.
        example: '2018-07-21 13:53:20'
      updated_at:
        type: string
        format: date-time
        description: Timestamp of when the Stop was updated.
        example: '2018-07-21 13:53:20'

  StopChoice:
    type: object
    required:
      - order
      - answer
      - next_stop
    properties:
      order:
        type: integer
        format: int32
        description: The position of the choice in order.
        example: 1
      answer:
        type: string
        description: The multiple choice answer.
        example: 'A Ghost'
      next_stop:
        type: integer
        format: int32
        description: The ID of the next stop on the Tour if the User selects this choice.
        example: 5

  StopRoutePoint:
    type: object
    required:
      - next_stop_id
      - order
      - latitude
      - longitude
    properties:
      next_stop:
        type: integer
        format: int32
        description: The ID of the stop that the route point goes to.
      order:
        type: integer
        format: int32
        description: The position of the route point in order.
        example: 1
      latitude:
        type: number
        format: float
        example: 40.7395956
      longitude:
        type: number
        format: float
        example: -73.9913727

  TourRoutePoint:
    type: object
    required:
      - order
      - latitude
      - longitude
    properties:
      order:
        type: integer
        format: int32
        description: The position of the route point in order.
        example: 1
      latitude:
        type: number
        format: float
        example: 40.7395956
      longitude:
        type: number
        format: float
        example: -73.9913727

  Location:
    type: object
    properties:
      address1:
        type: string
        description: Address line 1
        example: 150 5th Avenue
      address2:
        type: string
        description: Address line 2
        example: Unit 405
      city:
        type: string
        description: City
        example: New York
      state:
        type: string
        description: State
        example: NY
      country:
        type: string
        description: Country
        example: US
      zipcode:
        type: string
        description: Postal code
        example: 10001
      latitude:
        type: number
        format: float
        description: Latitude coordinate
        example: 40.7395956
      longitude:
        type: number
        format: float
        description: Longitude coordinate
        example: -73.9913727

  PaginationLinks:
    type: object
    properties:
      first:
        type: string
        description: URL to fetch the first page of records.
        example: http://api.wejunket.com/mobile/tours?page=1
      last:
        type: string
        description: URL to fetch the last page of records.
        example: http://api.wejunket.com/mobile/tours?page=99
      prev:
        type: string
        description: URL to fetch the previous page of records.
        example: http://api.wejunket.com/mobile/tours?page=1
      next:
        type: string
        description: URL to fetch the next page of records.
        example: http://api.wejunket.com/mobile/tours?page=2

  PaginationMeta:
    type: object
    properties:
      current_page:
        type: integer
        format: int32
        description: The current page number.
        example: 2
      from:
        type: integer
        format: int32
        description: The position of the first item in the resultset.
        example: 16
      last_page:
        type: integer
        format: int32
        description: The number of the last page.
        example: 99
      path:
        type: string
        description: The base URL for the resource.
        example: http://api.wejunket.com/mobile/tours
      per_page:
        type: integer
        format: int32
        description: The number of results shown per page.
        example: 15
      to:
        type: integer
        format: int32
        description: The position of the last item in the resultset.
        example: 30
      total:
        type: integer
        format: int32
        description: The total number of records.
        example: 1481
        
  Review:
    type: object
    required:
      - id
      - rating
      - user_id
      - tour_id
      - created_at
      - user
    properties:
      id:
        type: integer
        format: int32
        description: The ID of the Review.
        example: 52
      rating:
        type: integer
        format: int32
        default: 0
        minimum: 0
        maximum: 50
        description: |
          The rating value of the review.  This is based on a 5 star rating system, but uses whole numbers instead of decimals.  For example 25 = 2.5 stars
        example: 25
      review: 
        type: string
        maximum: 255
        description: A short text review of the Tour.
        example: This was a great Tour, and free too!
      user_id: 
        type: integer
        format: int32
        description: The creating user's invalid.
        example: 10009
      tour_id:
        type: integer
        format: int32
        description: The Tour related to the review.
        example: 90303
      created_at:
        type: string
        format: date-time
        description: Timestamp of when the review was created.
        example: '2018-07-21 13:53:20'
      updated_at:
        type: string
        format: date-time
        description: Timestamp of when the review was last updated.
        example: '2018-07-21 13:53:20'
      user:
        $ref: '#/definitions/User'

  Prize:
    type: object
    properties:
      details:
        type: string
        description: The details and description of the Tour prize.
        example: $10 Giftcard
        maximum: 255
      instructions:
        type: string
        description: The instructions for how to redeem the Tour prize.
        example: Goto the local store to redeem.
        maximum: 65535
      time_limit:
        type: integer
        format: int32
        description: The time (in hours) that the tour's prize is available after the the user wins the trophy.
        example: 48
      expires_at:
        type: string
        format: date-time
        description: The time when the prize should be considered expired, based on the time limit and the time the user won the prize.
        example: '2018-07-21 13:53:20'

  ScoreCard:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: The unique id for the score card.
        example: 99
      par:
        type: integer
        format: int32
        description: For adventure tours.  The average number of minutes it should take a user to complete the tour.  This is used for calculating users point in the backend, and probably is not needed for the mobile application.
        example: 66
      is_adventure:
        type: boolean
        description: Identifies if the score card is referencing an adventure tour or not.
        example: true
      stops_visited:
        type: integer
        format: int32
        description: The number of stops visited.
      total_stops:
        type: integer
        format: int32
        description: The total number of stops on the tour.
      points:
        type: integer
        format: int32
        description: The users current points.  For regular tours, this is updated for every stop the user visits.  For adventure tours, this is only calculated and finalized once a user has visited the last stop on the Tour. 
      won_trophy:
        type: boolean
        description: Identifies if the user should be awarded a trophy.
        example: true
      trophy_url:
        type: string
        format: string
        description: The URL for the custom trophy image, if any.
        example: https://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg
      prize:
        $ref: '#/definitions/Prize'
        description: The prize information that was awarded with the trophy.  This is only populated if the user has won a trophy.
      started_at:
        type: string
        format: date-time
        description: The time the user started the Tour.
        example: '2018-07-21 13:53:20'
      finished_at:
        type: string
        format: date-time
        description: The time the user finished the last stop on the Tour.  For regular tours, this only occurs once they have visited every stop on the Tour.  For adventure tours, this occurs when they have visited the stop that is designated to be the end point of a Tour.
        example: '2018-07-21 13:53:20'
      tour_id:
        type: integer
        format: int32
        description: The ID of the tour the score card is referencing.
        example: 100003
      tour:
        $ref: '#/definitions/Tour'
        description: The tour the score card is referencing.

  LeaderboardEntry:
    type: object
    properties:
      points:
        type: integer
        format: int32
        description: The number of point the user received.  Max points value is 200, minimum is 50.
        example: 200
      user:
        type: object
        $ref: '#/definitions/Profile'
        description: The profile of the user.
