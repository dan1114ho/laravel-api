swagger: '2.0'
info:
  title: Junket API
  description: Private API for the wejunket.com mobile apps. 
  version: 1.0.0
host: api.wejunket.com
basePath: /mobile
schemes:
 - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
- name: auth
- name: tours

paths:
  /auth/session:
    get:
      tags:
      - auth
      summary: Profile
      description: Get the logged in user's profile information.
      operationId: session
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
      
  /auth/refresh:
    get:
      tags:
        - auth
      summary: Refresh JWT Token
      description: Submit an expired JWT token and get a new active one.
      operationId: refresh
      produces:
        - application/json
      parameters:
      - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        204:
          description: OK
          headers:
            Authorization:
              type: string
              description: The new JWT bearer auth token.
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /auth/signup:
    post:
      tags:
      - auth
      summary: Sign up
      description: Register for an account.
      operationId: signup
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                description: The user's first and/or last name.
                example: John Doe
                maximum: 255
              email:
                type: string
                example: client@test.com
                description: The user's email address.
                maximum: 255
              password:
                type: string
                example: secret
                description: The user's password.
                minimum: 6
              password_confirmation:
                type: string
                example: secret
                description: Confirmation of the user's password.
                minimum: 6
      responses:
        200:
          description: Successful registration
          schema: 
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                description: JWT Auth token to be used for Bearer authentication header.
        422:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'

  /auth/login:
    post:
      tags:
      - auth
      summary: Login
      description: Submit credentials and get the JWT auth token.
      operationId: login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: body
          name: credentials
          description: The user's logim credentials.
          schema:
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: client@test.com
                description: The user's email address.
              password:
                type: string
                example: secret
                description: The user's password.
      responses:
        200:
          description: Successful login
          schema: 
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                description: JWT Auth token to be used for Bearer authentication header.
        422:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
          
  /tours:
    get:
      tags:
      - tours
      summary: Tour listing
      description: Get listing of all published Tours.
      operationId: tours
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/AuthToken'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tour'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        500:
          $ref: '#/responses/UnexpectedError'
          
  /tours/{tour_id}:
    get:
      tags:
      - tours
      summary: Get Tour details
      description: Returns all of the information for the given tour.
      operationId: tour
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/AuthToken'
      - in: path
        name: tour_id
        description: ID of the desired Tour
        required: true
        type: integer
        format: int64
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Tour'
        400:
          $ref: '#/responses/NoToken'
        401:
          $ref: '#/responses/Unauthroized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/UnexpectedError'

parameters:
  AuthToken:
    in: header
    name: Authorization
    type: string
    required: true
    description: |
      JTW auth bearer token in the format of "Authorization: Bearer {token_here}"

responses:
  ValidationError:
    description: Validation errors in the request body.
    schema:
      type: object
      properties:
          message:
            type: string
            description: The error message.
            example: The given data was invalid.
          errors:
            type: object
            description: A list of fields and their corresponding errors.

  NotFound:
    description: Object not found.
    schema:
      type: object
      properties:
        message:
          type: string
          description: The error message.
          example: Object not found
          
  NoToken:
    description: Invalid auth token provided.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.
          example: 'token_not_provided'
          
  Unauthroized:
    description: Unauthorized.  Invalid or expired auth token or credentials provided.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.
          example: 'token_invalid'
    
  UnexpectedError:
    description: An unexpected error occurred.
    schema:
      type: object
      properties:
        message: 
          type: string
          description: The error message.
    
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        description: The user's first and last name.
        example: John Doe
      email:
        type: string
        description: The user's email address.
        example: client@test.com
      role:
        type: string
        enum: [user, client, admin]
        description: |
          The user's role in the system.
          user - Regular mobile user
          client - Tour creator, has access to the CMS but can also be a mobile user.
          admin - System admin, has access to the Admin Panel but can also be a mobile user. 
        example: user
        
  Tour:
    type: object
    properties:
      id:
        type: integer
        format: int32
      user_id:
        type: integer
        format: int32
      title:
        type: string
        description: 'The name of the tour'
        example: 'San Fransico Ghost Tour'
      description:
        type: string
      pricing_type:
        type: string
        format: enum
          - free
          - premium
      type:
        type: string
        format: enum
          - indoor
          - outdoor
          - adventure
        description: 'The type of Tour.'
        example: 'adventure'
      stops_count:
        type: integer
        format: int32
        description: 'The number of Stops on the Tour.'
        example: 31
      location:
        $ref: '#/definitions/Location'
        description: 'The location of the Tour, including GPS coordinates.'
      facebook_url: 
        type: string
        description: 'Facebook URL'
        example: 'https://www.facebook.com/example-page'
      twitter_url: 
        type: string
        description: 'Twitter URL'
        example: 'https://www.twitter.com/example-page'
      instagram_url: 
        type: string
        description: 'Instagram URL'
        example: 'https://www.instagram.com/example-page'
      video_url:
        type: string
        description: 'Youtube video URL for the tour.'
        example: 'https://youtu.be/Bey4XXJAqS8'
      has_prize:
        type: boolean
        description: 'Whether the Tour offers a prize or not.'
        example: true
      prize_details:
        type: string
        description: 'The details and description of the Tour prize.'
        example: '$10 Giftcard'
      prize_instructions:
        type: string
        description: 'The instructions for how to redeem the Tour prize.'
        example: 'Goto the local store to redeem.'
      trophy_image:
        type: string
        description: 'Custom trophy image.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.png'
      start_point:
        type: integer
        format: int32
        description: 'The ID of the first stop on the Tour.'
        example: 15
      start_message:
        type: string
        description: 'The message to be displayed when a User starts the Tour.'
        example: 'Welcome to Ghost Tour'
      start_image:
        type: string
        description: 'The image to be displayed when a User starts the Tour.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      start_video_url:
        type: string
        description: 'The Youtube video URL of the video that is to be displayed when a User starts the Tour.'
        example: 'https://youtu.be/Bey4XXJAqS8'
      end_point:
        type: integer
        format: int32
        description: 'The ID of the last stop on the Tour.'
        example: 35
      end_message:
        type: string
        description: 'The message to be displayed when a User completes the Tour.'
        example: 'Well done!'
      end_image:
        type: string
        description: 'The image to be displayed when a User completes the Tour.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      end_video_url:
        type: string
        description: 'The Youtube video URL of the video that is to be displayed when a User completes the Tour.'
        example: 'https://youtu.be/Bey4XXJAqS8'
      main_image:
        type: string
        description: 'Tour cover image.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      image1:
        type: string
        description: 'First Tour image.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      image2:
        type: string
        description: 'Second Tour image.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      image3:
        type: string
        description: 'Third Tour image.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.jpg'
      pin_image:
        type: string
        description: 'Custom map pin icon.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.png'
      intro_audio:
        type: string
        description: 'Intro audio MP3 path.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3'
      background_audio:
        type: string
        description: 'Background audio MP3 path.'
        example: 'http://media.wejunket.com/images/4fd1b212d98168645c0dce52bdb05189.mp3'
      created_at:
        type: string
        format: date-time
        description: 'Timestamp the Tour was created.'
        example: '2018-07-21 13:53:20'
      updated_at:
        type: string
        format: date-time
        description: 'Timestamp the Tour was updated.'
        example: '2018-07-21 13:53:20'
      published_at:
        type: string
        format: date-time
        description: 'Timestamp the Tour was published.'
        example: '2018-07-21 13:53:20'

  Location:
    type: object
    properties:
      address1:
        type: string
        example: '150 5th Avenue'
      address2:
        type: string
        example: 'Unit 405'
      city:
        type: string
        example: 'New York'
      state:
        type: string
        example: 'NY'
      zipcode:
        type: string
        example: '10001'
      latitude:
        type: number
        format: float
        example: 40.7395956
      longitude:
        type: number
        format: float
        example: -73.9913727

  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string